#!/usr/bin/env bash

_SELF_PATH=`dirname "$(pwd)/$0"`
if [[ "$(which realpath 2> /dev/null)" ]]; then
    HS_TOOLS_HOME=`realpath "$_SELF_PATH"`
else
    HS_TOOLS_HOME="$_SELF_PATH"
fi

mode=$1
bridge_host_sub=$2

case $mode in
    on|off|ls|setup)
    ;;
    *)
    >&2 echo "Usage:"
    >&2 echo "  hsiosbridge on <host>"
    >&2 echo "  hsiosbridge off"
    >&2 echo "  hsiosbridge ls"
    >&2 echo "  hsiosbridge setup"
    exit 1
    ;;
esac

if [[ "on" == "$mode" && ! "$bridge_host_sub" ]]; then
    >&2 echo "Usage:"
    >&2 echo "  hsiosbridge on <host>"
    exit 1
fi


function plist_path_to_host_sub() {
    echo "$1" | sed 's/.*io.headspin.ios_bridge_\(.*\).plist/\1/'
}

function ls_pool() {
    for plist_path in "$HS_TOOLS_HOME"/units/io.headspin.ios_bridge_*.plist; do
        plist_path_to_host_sub "$plist_path"
    done
}

function setup() {
    brew update &> /dev/null
    echo "Installing socat ..."
    brew install socat
    echo "Installing HEAD versions of usbmuxd and libimobiledevice (compatible with iOS 11) ..."
    brew uninstall usbmuxd libimobiledevice &> /dev/null
    brew install usbmuxd --HEAD
    brew install libimobiledevice --HEAD
    echo "-----"
    echo "Setup successful."
}


if [[ "ls" == "$mode" ]]; then
    ls_pool
    exit 0
fi
if [[ "setup" == "$mode" ]]; then
    if [[ "0" == "$EUID" ]]; then
        >&2 echo "error: do not run setup as root"
        exit 1
    fi
    if [[ ! "$(which brew)" ]]; then
        >&2 echo "error: setup requires homebrew. Install homebrew then run setup again."
        exit 1
    fi
    setup
    exit 0
fi

    
function bridge_off() {
    for plist_path in `ls /Library/LaunchAgents/io.headspin.ios_bridge_*.plist 2> /dev/null`; do
        launchctl stop "$plist_path"
        launchctl unload "$plist_path"
        HS_TOOLS_HOME="$HS_TOOLS_HOME" "$HS_TOOLS_HOME/device_services/forward_usbmuxd.sh" off
        rm "$plist_path"
        echo "remote iOS devices disconnected ($(plist_path_to_host_sub $plist_path))"
    done
}

function bridge_on() {
    host_sub="$1"
    unit_filename="io.headspin.ios_bridge_${host_sub}.plist"
    plist_path="/Library/LaunchAgents/$unit_filename"

    if [[ ! -e "$HS_TOOLS_HOME/units/$unit_filename" ]]; then
        >&2 echo "error: host \"$host_sub\" is not part of the pool. Use one of:"
        ls_pool
        return 1
    fi

    mkdir -p `dirname "$plist_path"`
    mkdir -p "$HS_TOOLS_HOME/.log"
    chmod a=rwx "$HS_TOOLS_HOME/.log"

    cp "$HS_TOOLS_HOME/units/$unit_filename" "$plist_path"
    sed -i.bak "s:\$HS_TOOLS_HOME:$HS_TOOLS_HOME:g" "$plist_path"
    rm ${plist_path}.bak
    chmod u=rw,go= "$plist_path"
    launchctl load "$plist_path"
    launchctl start "$plist_path"
    echo "remote iOS devices connected ($(plist_path_to_host_sub $plist_path))"
}

function system_off() {
    launchctl stop /System/Library/LaunchDaemons/com.apple.usbmuxd.plist
    echo "local iOS devices disconnected"
}

function system_on() {
    launchctl start /System/Library/LaunchDaemons/com.apple.usbmuxd.plist
    echo "local iOS devices connected"
}


if [[ "0" != "$EUID" ]]; then
    >&2 echo "error: must run as root"
    exit 1
fi
if [[ "on" == "$mode" ]]; then
    bridge_off
    system_off
    bridge_on "$bridge_host_sub"
    if [[ "0" != "$?" ]]; then
        system_on
    fi
elif [[ "off" == "$mode" ]]; then
    bridge_off
    system_on
fi
sleep 2
